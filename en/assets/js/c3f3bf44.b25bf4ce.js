"use strict";(self.webpackChunkdocusaurus_docs=self.webpackChunkdocusaurus_docs||[]).push([[21302],{62731:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>a});var t=s(85893),i=s(11151);const o={sidebar_position:1,toc_max_heading_level:4},r="Lifecycle APIs",c={unversionedId:"api/plugin-methods/lifecycle-apis",id:"version-2.4.1/api/plugin-methods/lifecycle-apis",title:"Lifecycle APIs",description:"During the build, plugins are loaded in parallel to fetch their own contents and render them to routes. Plugins may also configure webpack or post-process the generated files.",source:"@site/versioned_docs/version-2.4.1/api/plugin-methods/lifecycle-apis.mdx",sourceDirName:"api/plugin-methods",slug:"/api/plugin-methods/lifecycle-apis",permalink:"/docusaurus-docs/en/docs/api/plugin-methods/lifecycle-apis",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/api/plugin-methods/lifecycle-apis.mdx",tags:[],version:"2.4.1",lastUpdatedBy:"wohugb@aliyun.com",lastUpdatedAt:1693467116,formattedLastUpdatedAt:"Aug 31, 2023",sidebarPosition:1,frontMatter:{sidebar_position:1,toc_max_heading_level:4},sidebar:"api",previous:{title:"Plugin Method References",permalink:"/docusaurus-docs/en/docs/api/plugin-methods/"},next:{title:"Extending infrastructure",permalink:"/docusaurus-docs/en/docs/api/plugin-methods/extend-infrastructure"}},d={},a=[{value:"<code>async loadContent()</code>",id:"loadContent",level:2},{value:"<code>async contentLoaded({content, actions})</code>",id:"contentLoaded",level:2},{value:"<code>content</code>",id:"content",level:3},{value:"<code>actions</code>",id:"actions",level:3},{value:"<code>addRoute(config: RouteConfig): void</code>",id:"addRoute",level:4},{value:"<code>createData(name: string, data: any): Promise&lt;string&gt;</code>",id:"createData",level:4},{value:"<code>setGlobalData(data: any): void</code>",id:"setGlobalData",level:4},{value:"<code>configureWebpack(config, isServer, utils, content)</code>",id:"configureWebpack",level:2},{value:"<code>config</code>",id:"config",level:3},{value:"<code>isServer</code>",id:"isServer",level:3},{value:"<code>utils</code>",id:"utils",level:3},{value:"<code>content</code>",id:"content-1",level:3},{value:"Merge strategy",id:"merge-strategy",level:3},{value:"Configuring dev server",id:"configuring-dev-server",level:3},{value:"<code>configurePostCss(options)</code>",id:"configurePostCss",level:2},{value:"<code>postBuild(props)</code>",id:"postBuild",level:2},{value:"<code>injectHtmlTags({content})</code>",id:"injectHtmlTags",level:2},{value:"<code>getClientModules()</code>",id:"getClientModules",level:2}];function l(e){const n=Object.assign({h1:"h1",p:"p",h2:"h2",code:"code",pre:"pre",h3:"h3",em:"em",h4:"h4",a:"a",admonition:"admonition",ul:"ul",li:"li"},(0,i.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"lifecycle-apis",children:"Lifecycle APIs"}),"\n",(0,t.jsx)(n.p,{children:"During the build, plugins are loaded in parallel to fetch their own contents and render them to routes. Plugins may also configure webpack or post-process the generated files."}),"\n",(0,t.jsx)(n.h2,{id:"loadContent",children:(0,t.jsx)(n.code,{children:"async loadContent()"})}),"\n",(0,t.jsx)(n.p,{children:"Plugins should use this lifecycle to fetch from data sources (filesystem, remote API, headless CMS, etc.) or do some server processing. The return value is the content it needs."}),"\n",(0,t.jsx)(n.p,{children:"For example, this plugin below returns a random integer between 1 to 10 as content."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="docusaurus-plugin/src/index.js"',children:"module.exports = function (context, options) {\n  return {\n    name: 'docusaurus-plugin',\n    // highlight-start\n    async loadContent() {\n      return 1 + Math.floor(Math.random() * 10);\n    },\n    // highlight-end\n  };\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"contentLoaded",children:(0,t.jsx)(n.code,{children:"async contentLoaded({content, actions})"})}),"\n",(0,t.jsxs)(n.p,{children:["The data that was loaded in ",(0,t.jsx)(n.code,{children:"loadContent"})," will be consumed in ",(0,t.jsx)(n.code,{children:"contentLoaded"}),". It can be rendered to routes, registered as global data, etc."]}),"\n",(0,t.jsx)(n.h3,{id:"content",children:(0,t.jsx)(n.code,{children:"content"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"contentLoaded"})," will be called ",(0,t.jsx)(n.em,{children:"after"})," ",(0,t.jsx)(n.code,{children:"loadContent"})," is done. The return value of ",(0,t.jsx)(n.code,{children:"loadContent()"})," will be passed to ",(0,t.jsx)(n.code,{children:"contentLoaded"})," as ",(0,t.jsx)(n.code,{children:"content"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"actions",children:(0,t.jsx)(n.code,{children:"actions"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"actions"})," contain three functions:"]}),"\n",(0,t.jsx)(n.h4,{id:"addRoute",children:(0,t.jsx)(n.code,{children:"addRoute(config: RouteConfig): void"})}),"\n",(0,t.jsx)(n.p,{children:"Create a route to add to the website."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"type RouteConfig = {\n  path: string;\n  component: string;\n  modules?: RouteModules;\n  routes?: RouteConfig[];\n  exact?: boolean;\n  priority?: number;\n};\ntype RouteModules = {\n  [module: string]: Module | RouteModules | RouteModules[];\n};\ntype Module =\n  | {\n      path: string;\n      __import?: boolean;\n      query?: ParsedUrlQueryInput;\n    }\n  | string;\n"})}),"\n",(0,t.jsx)(n.h4,{id:"createData",children:(0,t.jsx)(n.code,{children:"createData(name: string, data: any): Promise<string>"})}),"\n",(0,t.jsx)(n.p,{children:"A declarative callback to create static data (generally JSON or string) which can later be provided to your routes as props. Takes the file name and data to be stored, and returns the actual data file's path."}),"\n",(0,t.jsxs)(n.p,{children:["For example, this plugin below creates a ",(0,t.jsx)(n.code,{children:"/friends"})," page which displays ",(0,t.jsx)(n.code,{children:"Your friends are: Yangshun, Sebastien"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",metastring:'title="website/src/components/Friends.js"',children:"import React from 'react';\n\nexport default function FriendsComponent({friends}) {\n  return <div>Your friends are {friends.join(',')}</div>;\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="docusaurus-friends-plugin/src/index.js"',children:"export default function friendsPlugin(context, options) {\n  return {\n    name: 'docusaurus-friends-plugin',\n    // highlight-start\n    async contentLoaded({content, actions}) {\n      const {createData, addRoute} = actions;\n      // Create friends.json\n      const friends = ['Yangshun', 'Sebastien'];\n      const friendsJsonPath = await createData(\n        'friends.json',\n        JSON.stringify(friends),\n      );\n\n      // Add the '/friends' routes, and ensure it receives the friends props\n      addRoute({\n        path: '/friends',\n        component: '@site/src/components/Friends.js',\n        modules: {\n          // propName -> JSON file path\n          friends: friendsJsonPath,\n        },\n        exact: true,\n      });\n    },\n    // highlight-end\n  };\n}\n"})}),"\n",(0,t.jsx)(n.h4,{id:"setGlobalData",children:(0,t.jsx)(n.code,{children:"setGlobalData(data: any): void"})}),"\n",(0,t.jsx)(n.p,{children:"This function permits one to create some global plugin data that can be read from any page, including the pages created by other plugins, and your theme layout."}),"\n",(0,t.jsxs)(n.p,{children:["This data becomes accessible to your client-side/theme code through the ",(0,t.jsx)(n.a,{href:"/docusaurus-docs/en/docs/docusaurus-core#useGlobalData",children:(0,t.jsx)(n.code,{children:"useGlobalData"})})," and ",(0,t.jsx)(n.a,{href:"/docusaurus-docs/en/docs/docusaurus-core#usePluginData",children:(0,t.jsx)(n.code,{children:"usePluginData"})})," hooks."]}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["Global data is... global: its size affects the loading time of all pages of your site, so try to keep it small. Prefer ",(0,t.jsx)(n.code,{children:"createData"})," and page-specific data whenever possible."]})}),"\n",(0,t.jsxs)(n.p,{children:["For example, this plugin below creates a ",(0,t.jsx)(n.code,{children:"/friends"})," page which displays ",(0,t.jsx)(n.code,{children:"Your friends are: Yangshun, Sebastien"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-jsx",metastring:'title="website/src/components/Friends.js"',children:"import React from 'react';\nimport {usePluginData} from '@docusaurus/useGlobalData';\n\nexport default function FriendsComponent() {\n  const {friends} = usePluginData('docusaurus-friends-plugin');\n  return <div>Your friends are {friends.join(',')}</div>;\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="docusaurus-friends-plugin/src/index.js"',children:"export default function friendsPlugin(context, options) {\n  return {\n    name: 'docusaurus-friends-plugin',\n    // highlight-start\n    async contentLoaded({content, actions}) {\n      const {setGlobalData, addRoute} = actions;\n      // Create friends global data\n      setGlobalData({friends: ['Yangshun', 'Sebastien']});\n\n      // Add the '/friends' routes\n      addRoute({\n        path: '/friends',\n        component: '@site/src/components/Friends.js',\n        exact: true,\n      });\n    },\n    // highlight-end\n  };\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"configureWebpack",children:(0,t.jsx)(n.code,{children:"configureWebpack(config, isServer, utils, content)"})}),"\n",(0,t.jsxs)(n.p,{children:["Modifies the internal webpack config. If the return value is a JavaScript object, it will be merged into the final config using ",(0,t.jsx)(n.a,{href:"https://github.com/survivejs/webpack-merge",children:(0,t.jsx)(n.code,{children:"webpack-merge"})}),". If it is a function, it will be called and receive ",(0,t.jsx)(n.code,{children:"config"})," as the first argument and an ",(0,t.jsx)(n.code,{children:"isServer"})," flag as the second argument."]}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["The API of ",(0,t.jsx)(n.code,{children:"configureWebpack"})," will be modified in the future to accept an object (",(0,t.jsx)(n.code,{children:"configureWebpack({config, isServer, utils, content})"}),")"]})}),"\n",(0,t.jsx)(n.h3,{id:"config",children:(0,t.jsx)(n.code,{children:"config"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"configureWebpack"})," is called with ",(0,t.jsx)(n.code,{children:"config"})," generated according to client/server build. You may treat this as the base config to be merged with."]}),"\n",(0,t.jsx)(n.h3,{id:"isServer",children:(0,t.jsx)(n.code,{children:"isServer"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"configureWebpack"})," will be called both in server build and in client build. The server build receives ",(0,t.jsx)(n.code,{children:"true"})," and the client build receives ",(0,t.jsx)(n.code,{children:"false"})," as ",(0,t.jsx)(n.code,{children:"isServer"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"utils",children:(0,t.jsx)(n.code,{children:"utils"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"configureWebpack"})," also receives an util object:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"getStyleLoaders(isServer: boolean, cssOptions: {[key: string]: any}): Loader[]"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"getJSLoader(isServer: boolean, cacheOptions?: {}): Loader | null"})}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"You may use them to return your webpack configuration conditionally."}),"\n",(0,t.jsxs)(n.p,{children:["For example, this plugin below modify the webpack config to transpile ",(0,t.jsx)(n.code,{children:".foo"})," files."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="docusaurus-plugin/src/index.js"',children:"module.exports = function (context, options) {\n  return {\n    name: 'custom-docusaurus-plugin',\n    // highlight-start\n    configureWebpack(config, isServer, utils) {\n      const {getJSLoader} = utils;\n      return {\n        module: {\n          rules: [\n            {\n              test: /\\.foo$/,\n              use: [getJSLoader(isServer), 'my-custom-webpack-loader'],\n            },\n          ],\n        },\n      };\n    },\n    // highlight-end\n  };\n};\n"})}),"\n",(0,t.jsx)(n.h3,{id:"content-1",children:(0,t.jsx)(n.code,{children:"content"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"configureWebpack"})," will be called both with the content loaded by the plugin."]}),"\n",(0,t.jsx)(n.h3,{id:"merge-strategy",children:"Merge strategy"}),"\n",(0,t.jsxs)(n.p,{children:["We merge the Webpack configuration parts of plugins into the global Webpack config using ",(0,t.jsx)(n.a,{href:"https://github.com/survivejs/webpack-merge",children:"webpack-merge"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"It is possible to specify the merge strategy. For example, if you want a webpack rule to be prepended instead of appended:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="docusaurus-plugin/src/index.js"',children:"module.exports = function (context, options) {\n  return {\n    name: 'custom-docusaurus-plugin',\n    configureWebpack(config, isServer, utils) {\n      return {\n        // highlight-start\n        mergeStrategy: {'module.rules': 'prepend'},\n        module: {rules: [myRuleToPrepend]},\n        // highlight-end\n      };\n    },\n  };\n};\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Read the ",(0,t.jsx)(n.a,{href:"https://github.com/survivejs/webpack-merge#merging-with-strategies",children:"webpack-merge strategy doc"})," for more details."]}),"\n",(0,t.jsx)(n.h3,{id:"configuring-dev-server",children:"Configuring dev server"}),"\n",(0,t.jsxs)(n.p,{children:["The dev server can be configured through returning a ",(0,t.jsx)(n.code,{children:"devServer"})," field."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="docusaurus-plugin/src/index.js"',children:"module.exports = function (context, options) {\n  return {\n    name: 'custom-docusaurus-plugin',\n    configureWebpack(config, isServer, utils) {\n      return {\n        // highlight-start\n        devServer: {\n          open: '/docs', // Opens localhost:3000/docs instead of localhost:3000/\n        },\n        // highlight-end\n      };\n    },\n  };\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"configurePostCss",children:(0,t.jsx)(n.code,{children:"configurePostCss(options)"})}),"\n",(0,t.jsxs)(n.p,{children:["Modifies ",(0,t.jsxs)(n.a,{href:"https://webpack.js.org/loaders/postcss-loader/#postcssoptions",children:[(0,t.jsx)(n.code,{children:"postcssOptions"})," of ",(0,t.jsx)(n.code,{children:"postcss-loader"})]})," during the generation of the client bundle."]}),"\n",(0,t.jsxs)(n.p,{children:["Should return the mutated ",(0,t.jsx)(n.code,{children:"postcssOptions"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["By default, ",(0,t.jsx)(n.code,{children:"postcssOptions"})," looks like this:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"const postcssOptions = {\n  ident: 'postcss',\n  plugins: [require('autoprefixer')],\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="docusaurus-plugin/src/index.js"',children:"module.exports = function (context, options) {\n  return {\n    name: 'docusaurus-plugin',\n    // highlight-start\n    configurePostCss(postcssOptions) {\n      // Appends new PostCSS plugin.\n      postcssOptions.plugins.push(require('postcss-import'));\n      return postcssOptions;\n    },\n    // highlight-end\n  };\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"postBuild",children:(0,t.jsx)(n.code,{children:"postBuild(props)"})}),"\n",(0,t.jsx)(n.p,{children:"Called when a (production) build finishes."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"interface Props {\n  siteDir: string;\n  generatedFilesDir: string;\n  siteConfig: DocusaurusConfig;\n  outDir: string;\n  baseUrl: string;\n  headTags: string;\n  preBodyTags: string;\n  postBodyTags: string;\n  routesPaths: string[];\n  plugins: Plugin<any>[];\n  content: Content;\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="docusaurus-plugin/src/index.js"',children:"module.exports = function (context, options) {\n  return {\n    name: 'docusaurus-plugin',\n    // highlight-start\n    async postBuild({siteConfig = {}, routesPaths = [], outDir}) {\n      // Print out to console all the rendered routes.\n      routesPaths.map((route) => {\n        console.log(route);\n      });\n    },\n    // highlight-end\n  };\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"injectHtmlTags",children:(0,t.jsx)(n.code,{children:"injectHtmlTags({content})"})}),"\n",(0,t.jsx)(n.p,{children:"Inject head and/or body HTML tags to Docusaurus generated HTML."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"injectHtmlTags"})," will be called both with the content loaded by the plugin."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-ts",children:"function injectHtmlTags(): {\n  headTags?: HtmlTags;\n  preBodyTags?: HtmlTags;\n  postBodyTags?: HtmlTags;\n};\n\ntype HtmlTags = string | HtmlTagObject | (string | HtmlTagObject)[];\n\ntype HtmlTagObject = {\n  /**\n   * Attributes of the HTML tag\n   * E.g. `{'disabled': true, 'value': 'demo', 'rel': 'preconnect'}`\n   */\n  attributes?: {\n    [attributeName: string]: string | boolean;\n  };\n  /**\n   * The tag name e.g. `div`, `script`, `link`, `meta`\n   */\n  tagName: string;\n  /**\n   * The inner HTML\n   */\n  innerHTML?: string;\n};\n"})}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="docusaurus-plugin/src/index.js"',children:"module.exports = function (context, options) {\n  return {\n    name: 'docusaurus-plugin',\n    loadContent: async () => {\n      return {remoteHeadTags: await fetchHeadTagsFromAPI()};\n    },\n    // highlight-start\n    injectHtmlTags({content}) {\n      return {\n        headTags: [\n          {\n            tagName: 'link',\n            attributes: {\n              rel: 'preconnect',\n              href: 'https://www.github.com',\n            },\n          },\n          ...content.remoteHeadTags,\n        ],\n        preBodyTags: [\n          {\n            tagName: 'script',\n            attributes: {\n              charset: 'utf-8',\n              src: '/noflash.js',\n            },\n          },\n        ],\n        postBodyTags: [`<div> This is post body </div>`],\n      };\n    },\n    // highlight-end\n  };\n};\n"})}),"\n",(0,t.jsx)(n.h2,{id:"getClientModules",children:(0,t.jsx)(n.code,{children:"getClientModules()"})}),"\n",(0,t.jsxs)(n.p,{children:["Returns an array of paths to the ",(0,t.jsx)(n.a,{href:"/docusaurus-docs/en/docs/advanced/client#client-modules",children:"client modules"})," that are to be imported into the client bundle."]}),"\n",(0,t.jsxs)(n.p,{children:["As an example, to make your theme load a ",(0,t.jsx)(n.code,{children:"customCss"})," or ",(0,t.jsx)(n.code,{children:"customJs"})," file path from ",(0,t.jsx)(n.code,{children:"options"})," passed in by the user:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",metastring:'title="my-theme/src/index.js"',children:"const path = require('path');\n\nmodule.exports = function (context, options) {\n  const {customCss, customJs} = options || {};\n  return {\n    name: 'name-of-my-theme',\n    // highlight-start\n    getClientModules() {\n      return [customCss, customJs];\n    },\n    // highlight-end\n  };\n};\n"})})]})}const u=function(e={}){const{wrapper:n}=Object.assign({},(0,i.ah)(),e.components);return n?(0,t.jsx)(n,Object.assign({},e,{children:(0,t.jsx)(l,e)})):l(e)}},11151:(e,n,s)=>{s.d(n,{Zo:()=>c,ah:()=>o});var t=s(67294);const i=t.createContext({});function o(e){const n=t.useContext(i);return t.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}const r={};function c({components:e,children:n,disableParentContext:s}){let c;return c=s?"function"==typeof e?e({}):e||r:o(e),t.createElement(i.Provider,{value:c},n)}}}]);